// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    String    @id @default(uuid())
  firstName String?
  lastName  String?
  email     String    @unique
  gender    String?
  password  String
  avatar    String?
  role      Role
  carts     Cart[]
  orders    Orders[]
  createAt  DateTime  @default(now())
  updateAt  DateTime? @updatedAt
}

model Products {
  productId     Int            @id @default(autoincrement())
  productName   String
  price         Int
  stockQuantity Int
  description   String?
  minPlayer     Int
  maxPlayer     Int
  duration      Int
  categoryId    Int
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  carts         Cart[]
  orderDetails  OrderDetails[]
  category      Categories     @relation(fields: [categoryId], references: [categoryId])
}

model Categories {
  categoryId   Int        @id @default(autoincrement())
  categoryName String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     Products[]
}

model Cart {
  cartId       Int      @id @default(autoincrement())
  cartQuantity Int
  userId       String
  productId    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Users    @relation(fields: [userId], references: [userId])
  product      Products @relation(fields: [productId], references: [productId])
}

model Orders {
  orderId       Int        @id @default(autoincrement())
  description   String?
  paymentMethod String
  paymentAmount Int
  status        OrderStattus   @default(Pending)
  paymentTime   DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          Users          @relation(fields: [userId], references: [userId])
  orderDetails  OrderDetails[]
}

model OrderDetails {
  orderDetailId Int    @id @default(autoincrement())
  productId     Int
  quantity      Int
  amount        Int
  orderId       Int

  orders  Orders?   @relation(fields: [orderId], references: [orderId])
  product Products? @relation(fields: [productId], references: [productId])
}

enum Role {
  Customer
  Shop
  Admin
}

enum OrderStattus {
  Pending
  Cancelled
  Success
  Failed
}
